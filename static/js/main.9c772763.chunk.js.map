{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","add","newTodo","id","Math","random","label","state","newTache","done","newList","listTodo","setState","value","change","e","target","delete","i","listAfterDelete","filter","el","spanStyle","textDecoration","this","className","type","placeholder","autofocus","onChange","onClick","map","key","style","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wPAoEmBA,G,kBAjEjB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAgBRC,IAAM,WACJ,IAAIC,EAAU,CAAEC,GAAIC,KAAKC,SAAUC,MAAO,EAAKC,MAAMC,SAAUC,KAAM,EAAKF,MAAME,MAC5EC,EAAO,sBAAO,EAAKH,MAAMI,UAAlB,CAA4BT,IACvC,EAAKU,SAAS,CAAED,SAAUD,EAAQG,MAAM,MApBvB,EAuBnBC,OAAS,SAACC,GACR,EAAKH,SAAS,CAAEJ,SAAUO,EAAEC,OAAOH,MAAQA,MAAME,EAAEC,OAAOH,SAxBzC,EA2BnBI,OAAO,SAACC,GACN,IAAMC,EAAgB,EAAKZ,MAAMI,SAASS,QAAO,SAACC,GAChD,OAAOA,EAAGH,IAAIA,KAEf,EAAKN,SAAS,CAACD,SAASQ,KA7BzB,EAAKZ,MAAQ,CACXI,SAAU,GACVH,SAAU,GACVK,MAAM,GACNJ,MAAK,GANU,E,sEAiCT,IAAD,OACDa,EAAY,CAAEC,eAAgBC,KAAKjB,MAAMI,SAASF,KAAO,eAAiB,QAChF,OACE,yBAAKgB,UAAU,eACb,0BAAMA,UAAU,WACd,0CACA,8CACF,2BAAOZ,MAAOW,KAAKjB,MAAMM,MAAOY,UAAU,YAAaC,KAAK,OAAOC,YAAY,kBAAkBC,UAAU,KACzGC,SAAUL,KAAKV,SACjB,6BACA,6BAEA,2BAAOW,UAAU,MAAMtB,GAAG,WAAWuB,KAAK,SAASb,MAAM,MAAMiB,QAASN,KAAKvB,MAC7E,wDAECuB,KAAKjB,MAAMI,SAASoB,KAAI,SAACV,EAAIH,GAC5B,OACE,uBAAGc,IAAKd,GAEN,0BAAMe,MAAOX,GAAaD,EAAGf,OAC7B,4BAAQwB,SAAO,GAAE,EAAKvB,MAAMI,SAASF,KAAO,OAAS,WAArD,KACA,4BAAQqB,QAAS,kBAAI,EAAKb,OAAOI,EAAGH,KAApC,mB,GAvDIgB,cCUEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.9c772763.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      listTodo: [],\n      newTache: \"\",\n      value:\"\",\n      done:false\n\n    }\n  }\n  //complete = (i) => {\n   // const listTodo = this.state.listTodo;\n   // listTodo[i].done = !listTodo[i].done;\n    //this.setState({ listTodo });\n  //}\n\n     \n  add = () => {\n    let newTodo = { id: Math.random(), label: this.state.newTache ,done: this.state.done}\n    let newList = [...this.state.listTodo, newTodo]\n    this.setState({ listTodo: newList,value:\"\" })\n    \n  }\n  change = (e) => {\n    this.setState({ newTache: e.target.value , value:e.target.value })\n\n  }\n  delete=(i)=>{\n    const listAfterDelete=this.state.listTodo.filter((el)=>{\n      return el.i!==i\n     })\n     this.setState({listTodo:listAfterDelete})\n  }\n  render() {\n    const spanStyle = { textDecoration: this.state.listTodo.done ? 'line-through' : 'none' }\n    return (\n      <div className=\"todo-header\">\n        <span className=\"to-left\">\n          <h1>To-Do App!</h1>\n          <h5>Add New To-Do</h5></span>\n        <input value={this.state.value} className=\"tape-task\"  type=\"text\" placeholder=\"Enter your Task\" autofocus=\"on\"\n          onChange={this.change} />\n        <br />\n        <br />\n\n        <input className=\"btn\" id=\"add-task\" type=\"button\" value=\"Add\" onClick={this.add} />\n        <p>Let's get some work done!</p>\n\n        {this.state.listTodo.map((el, i) => {\n          return (\n            <p key={i}>\n              \n              <span style={spanStyle} >{el.label}</span>\n              <button onClick>{this.state.listTodo.done ? 'Undo' : 'Complete'} </button>\n              <button onClick={()=>this.delete(el.i)}>Delete</button>\n            </p>\n          )\n        }\n        )\n        }\n        \n     </div>   \n    );\n      } \n}\n    export default App;\n\n      \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}